/* tslint:disable */
/* eslint-disable */
/*
C4C REST API

Access to the Crowd4Cash Crowdlending Platform through an API

The version of the OpenAPI document: 2.0.0
Contact: info@crowd4cash.ch

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ConnectorReport } from '../models';
// @ts-ignore
import { IntermediaryReport } from '../models';
// @ts-ignore
import { RentalReport } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * __Note__: It\'s valid only for investments made indirectly through connector
         * @summary Get your connector account summary and investments of the connected investors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectorInvestments: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Connector`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/Connector',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * __Note__: It\'s valid only for loans made indirectly through the intermediary
         * @summary Get your intermediary account summary and your partner loans data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntermediaryData: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Intermediary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/Intermediary',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * __Note__: It\'s valid only for loans made through this API
         * @summary Get your rental account summary and your loans data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentalAccountSummary: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Rental`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/Rental',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * __Note__: It\'s valid only for investments made indirectly through connector
         * @summary Get your connector account summary and investments of the connected investors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConnectorInvestments(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectorReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConnectorInvestments(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * __Note__: It\'s valid only for loans made indirectly through the intermediary
         * @summary Get your intermediary account summary and your partner loans data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntermediaryData(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntermediaryReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntermediaryData(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * __Note__: It\'s valid only for loans made through this API
         * @summary Get your rental account summary and your loans data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rentalAccountSummary(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RentalReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rentalAccountSummary(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportsApiFp(configuration)
    return {
        /**
         * __Note__: It\'s valid only for investments made indirectly through connector
         * @summary Get your connector account summary and investments of the connected investors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectorInvestments(options?: AxiosRequestConfig): AxiosPromise<ConnectorReport> {
            return localVarFp.getConnectorInvestments(options).then((request) => request(axios, basePath));
        },
        /**
         * __Note__: It\'s valid only for loans made indirectly through the intermediary
         * @summary Get your intermediary account summary and your partner loans data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntermediaryData(options?: AxiosRequestConfig): AxiosPromise<IntermediaryReport> {
            return localVarFp.getIntermediaryData(options).then((request) => request(axios, basePath));
        },
        /**
         * __Note__: It\'s valid only for loans made through this API
         * @summary Get your rental account summary and your loans data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentalAccountSummary(options?: AxiosRequestConfig): AxiosPromise<RentalReport> {
            return localVarFp.rentalAccountSummary(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportsApiGenerated - object-oriented interface
 * @export
 * @class ReportsApiGenerated
 * @extends {BaseAPI}
 */
export class ReportsApiGenerated extends BaseAPI {
    /**
     * __Note__: It\'s valid only for investments made indirectly through connector
     * @summary Get your connector account summary and investments of the connected investors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getConnectorInvestments(options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getConnectorInvestments(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * __Note__: It\'s valid only for loans made indirectly through the intermediary
     * @summary Get your intermediary account summary and your partner loans data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getIntermediaryData(options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getIntermediaryData(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * __Note__: It\'s valid only for loans made through this API
     * @summary Get your rental account summary and your loans data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public rentalAccountSummary(options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).rentalAccountSummary(options).then((request) => request(this.axios, this.basePath));
    }
}
