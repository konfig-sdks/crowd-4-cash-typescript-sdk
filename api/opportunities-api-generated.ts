/* tslint:disable */
/* eslint-disable */
/*
C4C REST API

Access to the Crowd4Cash Crowdlending Platform through an API

The version of the OpenAPI document: 2.0.0
Contact: info@crowd4cash.ch

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LoanRating } from '../models';
// @ts-ignore
import { Opportunity } from '../models';
// @ts-ignore
import { YN } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OpportunitiesApi - axios parameter creator
 * @export
 */
export const OpportunitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * __Note__: C4C offers a private, secure and uncomplicated way for the investors to discover, analyze, review and invest.
         * @summary Get available investment opportunities
         * @param {LoanRating} [rating] Evaluation of the credit risk based on a borrower\&#39;s credit history, quality of the collateral, and the likelihood of repayment e.g. AA
         * @param {number} [loanAmount] Loan amount e.g. 25000
         * @param {string} [loanType] Type of the loan e.g. Private, SME
         * @param {number} [availableAmount] Available amount to be invested at the moment of our API consuming e.g. 2000
         * @param {number} [interestRate] Interest rate of the loan in % e.g. 5.6
         * @param {number} [duration] Duration in months e.g. 24
         * @param {YN} [insurance] Is loan issured? - Yes, No
         * @param {YN} [collateral] Is loan collaterialized? - Yes, No
         * @param {number} [borrowerAge] Age of the borrower e.g. 42
         * @param {string} [borrowerNationality] Nationality of the borrower, e.g Switzerland, Liechtenstein ...
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableInvestments: async (rating?: LoanRating, loanAmount?: number, loanType?: string, availableAmount?: number, interestRate?: number, duration?: number, insurance?: YN, collateral?: YN, borrowerAge?: number, borrowerNationality?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Opportunities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })
            if (rating !== undefined) {
                localVarQueryParameter['Rating'] = rating;
            }

            if (loanAmount !== undefined) {
                localVarQueryParameter['LoanAmount'] = loanAmount;
            }

            if (loanType !== undefined) {
                localVarQueryParameter['LoanType'] = loanType;
            }

            if (availableAmount !== undefined) {
                localVarQueryParameter['AvailableAmount'] = availableAmount;
            }

            if (interestRate !== undefined) {
                localVarQueryParameter['InterestRate'] = interestRate;
            }

            if (duration !== undefined) {
                localVarQueryParameter['Duration'] = duration;
            }

            if (insurance !== undefined) {
                localVarQueryParameter['Insurance'] = insurance;
            }

            if (collateral !== undefined) {
                localVarQueryParameter['Collateral'] = collateral;
            }

            if (borrowerAge !== undefined) {
                localVarQueryParameter['BorrowerAge'] = borrowerAge;
            }

            if (borrowerNationality !== undefined) {
                localVarQueryParameter['BorrowerNationality'] = borrowerNationality;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/Opportunities',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpportunitiesApi - functional programming interface
 * @export
 */
export const OpportunitiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OpportunitiesApiAxiosParamCreator(configuration)
    return {
        /**
         * __Note__: C4C offers a private, secure and uncomplicated way for the investors to discover, analyze, review and invest.
         * @summary Get available investment opportunities
         * @param {OpportunitiesApiGetAvailableInvestmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableInvestments(requestParameters: OpportunitiesApiGetAvailableInvestmentsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Opportunity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableInvestments(requestParameters.rating, requestParameters.loanAmount, requestParameters.loanType, requestParameters.availableAmount, requestParameters.interestRate, requestParameters.duration, requestParameters.insurance, requestParameters.collateral, requestParameters.borrowerAge, requestParameters.borrowerNationality, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OpportunitiesApi - factory interface
 * @export
 */
export const OpportunitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OpportunitiesApiFp(configuration)
    return {
        /**
         * __Note__: C4C offers a private, secure and uncomplicated way for the investors to discover, analyze, review and invest.
         * @summary Get available investment opportunities
         * @param {OpportunitiesApiGetAvailableInvestmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableInvestments(requestParameters: OpportunitiesApiGetAvailableInvestmentsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Opportunity> {
            return localVarFp.getAvailableInvestments(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAvailableInvestments operation in OpportunitiesApi.
 * @export
 * @interface OpportunitiesApiGetAvailableInvestmentsRequest
 */
export type OpportunitiesApiGetAvailableInvestmentsRequest = {
    
    /**
    * Evaluation of the credit risk based on a borrower\'s credit history, quality of the collateral, and the likelihood of repayment e.g. AA
    * @type {LoanRating}
    * @memberof OpportunitiesApiGetAvailableInvestments
    */
    readonly rating?: LoanRating
    
    /**
    * Loan amount e.g. 25000
    * @type {number}
    * @memberof OpportunitiesApiGetAvailableInvestments
    */
    readonly loanAmount?: number
    
    /**
    * Type of the loan e.g. Private, SME
    * @type {string}
    * @memberof OpportunitiesApiGetAvailableInvestments
    */
    readonly loanType?: string
    
    /**
    * Available amount to be invested at the moment of our API consuming e.g. 2000
    * @type {number}
    * @memberof OpportunitiesApiGetAvailableInvestments
    */
    readonly availableAmount?: number
    
    /**
    * Interest rate of the loan in % e.g. 5.6
    * @type {number}
    * @memberof OpportunitiesApiGetAvailableInvestments
    */
    readonly interestRate?: number
    
    /**
    * Duration in months e.g. 24
    * @type {number}
    * @memberof OpportunitiesApiGetAvailableInvestments
    */
    readonly duration?: number
    
    /**
    * Is loan issured? - Yes, No
    * @type {YN}
    * @memberof OpportunitiesApiGetAvailableInvestments
    */
    readonly insurance?: YN
    
    /**
    * Is loan collaterialized? - Yes, No
    * @type {YN}
    * @memberof OpportunitiesApiGetAvailableInvestments
    */
    readonly collateral?: YN
    
    /**
    * Age of the borrower e.g. 42
    * @type {number}
    * @memberof OpportunitiesApiGetAvailableInvestments
    */
    readonly borrowerAge?: number
    
    /**
    * Nationality of the borrower, e.g Switzerland, Liechtenstein ...
    * @type {string}
    * @memberof OpportunitiesApiGetAvailableInvestments
    */
    readonly borrowerNationality?: string
    
}

/**
 * OpportunitiesApiGenerated - object-oriented interface
 * @export
 * @class OpportunitiesApiGenerated
 * @extends {BaseAPI}
 */
export class OpportunitiesApiGenerated extends BaseAPI {
    /**
     * __Note__: C4C offers a private, secure and uncomplicated way for the investors to discover, analyze, review and invest.
     * @summary Get available investment opportunities
     * @param {OpportunitiesApiGetAvailableInvestmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpportunitiesApiGenerated
     */
    public getAvailableInvestments(requestParameters: OpportunitiesApiGetAvailableInvestmentsRequest = {}, options?: AxiosRequestConfig) {
        return OpportunitiesApiFp(this.configuration).getAvailableInvestments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
