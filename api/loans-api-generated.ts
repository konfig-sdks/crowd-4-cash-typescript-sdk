/* tslint:disable */
/* eslint-disable */
/*
C4C REST API

Access to the Crowd4Cash Crowdlending Platform through an API

The version of the OpenAPI document: 2.0.0
Contact: info@crowd4cash.ch

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PagedList } from '../models';
// @ts-ignore
import { Status } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LoansApi - axios parameter creator
 * @export
 */
export const LoansApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * **Note**: In order to consume this endpoint we need to grant a special access to your account. Please [contact us](https://crowd4cash.ch/contact) for further information.
         * @summary Get a complete C4C loan data dataset for your credit analyses
         * @param {number} pageNumber Page number you want to access
         * @param {number} pageSize Number of items per page. Max is 20
         * @param {Status} loanstatus Status values that need to be considered for filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanData: async (pageNumber: number, pageSize: number, loanstatus: Status, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageNumber' is not null or undefined
            assertParamExists('getLoanData', 'pageNumber', pageNumber)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('getLoanData', 'pageSize', pageSize)
            // verify required parameter 'loanstatus' is not null or undefined
            assertParamExists('getLoanData', 'loanstatus', loanstatus)
            const localVarPath = `/Loans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })
            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (loanstatus !== undefined) {
                localVarQueryParameter['loanstatus'] = loanstatus;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/Loans',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoansApi - functional programming interface
 * @export
 */
export const LoansApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoansApiAxiosParamCreator(configuration)
    return {
        /**
         * **Note**: In order to consume this endpoint we need to grant a special access to your account. Please [contact us](https://crowd4cash.ch/contact) for further information.
         * @summary Get a complete C4C loan data dataset for your credit analyses
         * @param {LoansApiGetLoanDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoanData(requestParameters: LoansApiGetLoanDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanData(requestParameters.pageNumber, requestParameters.pageSize, requestParameters.loanstatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LoansApi - factory interface
 * @export
 */
export const LoansApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoansApiFp(configuration)
    return {
        /**
         * **Note**: In order to consume this endpoint we need to grant a special access to your account. Please [contact us](https://crowd4cash.ch/contact) for further information.
         * @summary Get a complete C4C loan data dataset for your credit analyses
         * @param {LoansApiGetLoanDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanData(requestParameters: LoansApiGetLoanDataRequest, options?: AxiosRequestConfig): AxiosPromise<PagedList> {
            return localVarFp.getLoanData(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getLoanData operation in LoansApi.
 * @export
 * @interface LoansApiGetLoanDataRequest
 */
export type LoansApiGetLoanDataRequest = {
    
    /**
    * Page number you want to access
    * @type {number}
    * @memberof LoansApiGetLoanData
    */
    readonly pageNumber: number
    
    /**
    * Number of items per page. Max is 20
    * @type {number}
    * @memberof LoansApiGetLoanData
    */
    readonly pageSize: number
    
    /**
    * Status values that need to be considered for filter
    * @type {Status}
    * @memberof LoansApiGetLoanData
    */
    readonly loanstatus: Status
    
}

/**
 * LoansApiGenerated - object-oriented interface
 * @export
 * @class LoansApiGenerated
 * @extends {BaseAPI}
 */
export class LoansApiGenerated extends BaseAPI {
    /**
     * **Note**: In order to consume this endpoint we need to grant a special access to your account. Please [contact us](https://crowd4cash.ch/contact) for further information.
     * @summary Get a complete C4C loan data dataset for your credit analyses
     * @param {LoansApiGetLoanDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoansApiGenerated
     */
    public getLoanData(requestParameters: LoansApiGetLoanDataRequest, options?: AxiosRequestConfig) {
        return LoansApiFp(this.configuration).getLoanData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
